service: sls-notes-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-domain-manager

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
  customDomain:
    domainName: notesapi.shyshkin.net
    basePath: 'v1'
    stage: ${self:provider.stage}
    certificateName: shyshkin.net
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs14.x
#  profile: serverless-admin
  stage: prod
  region: eu-north-1
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    COGNITO_IDENTITY_POOL_ID: eu-north-1:118ea813-9a63-4687-ae51-5a1e954a9fb0
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/note_id-index"

functions:

  authenticate-google:
    handler: api/authenticate-google.handler
    description: Google IDP Authentication
    events:
      - http:
          path: auth
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  add-note:
    handler: api/add-note.handler
    description: POST /notes
    events:
      - http:
          path: notes
          method: post
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-note:
    handler: api/get-note.handler
    description: GET /notes/n/{note_id}
    events:
      - http:
          path: notes/n/{note_id}
          method: get
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-notes:
    handler: api/get-notes.handler
    description: GET /notes
    events:
      - http:
          path: notes
          method: get
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  update-note:
    handler: api/update-note.handler
    description: PUT /notes/n/{note_id}
    events:
      - http:
          path: notes/n/{note_id}
          method: put
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-note:
    handler: api/delete-note.handler
    events:
      - http:
          path: notes/t/{timestamp}
          method: delete
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: note_id-index
            KeySchema:
              - AttributeName: note_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1


